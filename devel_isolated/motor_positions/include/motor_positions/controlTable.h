// Generated by gencpp from file motor_positions/controlTable.msg
// DO NOT EDIT!


#ifndef MOTOR_POSITIONS_MESSAGE_CONTROLTABLE_H
#define MOTOR_POSITIONS_MESSAGE_CONTROLTABLE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace motor_positions
{
template <class ContainerAllocator>
struct controlTable_
{
  typedef controlTable_<ContainerAllocator> Type;

  controlTable_()
    : dest(0)
    , command_id(0)
    , value(0)  {
    }
  controlTable_(const ContainerAllocator& _alloc)
    : dest(0)
    , command_id(0)
    , value(0)  {
  (void)_alloc;
    }



   typedef uint8_t _dest_type;
  _dest_type dest;

   typedef uint8_t _command_id_type;
  _command_id_type command_id;

   typedef uint16_t _value_type;
  _value_type value;





  typedef boost::shared_ptr< ::motor_positions::controlTable_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::motor_positions::controlTable_<ContainerAllocator> const> ConstPtr;

}; // struct controlTable_

typedef ::motor_positions::controlTable_<std::allocator<void> > controlTable;

typedef boost::shared_ptr< ::motor_positions::controlTable > controlTablePtr;
typedef boost::shared_ptr< ::motor_positions::controlTable const> controlTableConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::motor_positions::controlTable_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::motor_positions::controlTable_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace motor_positions

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'motor_positions': ['/home/charles/devel/ros/scarab/scarab_ros/src/motor_positions/ROS-msgs'], 'std_msgs': ['/home/charles/catkin_ws/install_isolated/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::motor_positions::controlTable_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motor_positions::controlTable_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motor_positions::controlTable_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motor_positions::controlTable_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motor_positions::controlTable_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motor_positions::controlTable_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::motor_positions::controlTable_<ContainerAllocator> >
{
  static const char* value()
  {
    return "31f7917cc26f8f92831d701d115a4e37";
  }

  static const char* value(const ::motor_positions::controlTable_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x31f7917cc26f8f92ULL;
  static const uint64_t static_value2 = 0x831d701d115a4e37ULL;
};

template<class ContainerAllocator>
struct DataType< ::motor_positions::controlTable_<ContainerAllocator> >
{
  static const char* value()
  {
    return "motor_positions/controlTable";
  }

  static const char* value(const ::motor_positions::controlTable_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::motor_positions::controlTable_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 dest       \n"
"uint8 command_id\n"
"uint16 value\n"
;
  }

  static const char* value(const ::motor_positions::controlTable_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::motor_positions::controlTable_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dest);
      stream.next(m.command_id);
      stream.next(m.value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct controlTable_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::motor_positions::controlTable_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::motor_positions::controlTable_<ContainerAllocator>& v)
  {
    s << indent << "dest: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dest);
    s << indent << "command_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.command_id);
    s << indent << "value: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOTOR_POSITIONS_MESSAGE_CONTROLTABLE_H
