// Generated by gencpp from file motor_positions/viaPoints.msg
// DO NOT EDIT!


#ifndef MOTOR_POSITIONS_MESSAGE_VIAPOINTS_H
#define MOTOR_POSITIONS_MESSAGE_VIAPOINTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace motor_positions
{
template <class ContainerAllocator>
struct viaPoints_
{
  typedef viaPoints_<ContainerAllocator> Type;

  viaPoints_()
    : motor_1(0)
    , motor_2(0)
    , motor_3(0)
    , motor_4(0)  {
    }
  viaPoints_(const ContainerAllocator& _alloc)
    : motor_1(0)
    , motor_2(0)
    , motor_3(0)
    , motor_4(0)  {
  (void)_alloc;
    }



   typedef uint16_t _motor_1_type;
  _motor_1_type motor_1;

   typedef uint16_t _motor_2_type;
  _motor_2_type motor_2;

   typedef uint16_t _motor_3_type;
  _motor_3_type motor_3;

   typedef uint16_t _motor_4_type;
  _motor_4_type motor_4;





  typedef boost::shared_ptr< ::motor_positions::viaPoints_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::motor_positions::viaPoints_<ContainerAllocator> const> ConstPtr;

}; // struct viaPoints_

typedef ::motor_positions::viaPoints_<std::allocator<void> > viaPoints;

typedef boost::shared_ptr< ::motor_positions::viaPoints > viaPointsPtr;
typedef boost::shared_ptr< ::motor_positions::viaPoints const> viaPointsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::motor_positions::viaPoints_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::motor_positions::viaPoints_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace motor_positions

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'motor_positions': ['/home/charles/devel/ros/scarab/scarab_ros/src/motor_positions/ROS-msgs'], 'std_msgs': ['/home/charles/catkin_ws/install_isolated/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::motor_positions::viaPoints_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motor_positions::viaPoints_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motor_positions::viaPoints_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motor_positions::viaPoints_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motor_positions::viaPoints_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motor_positions::viaPoints_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::motor_positions::viaPoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "62ceb7511df5429669d5680ad1b7fffb";
  }

  static const char* value(const ::motor_positions::viaPoints_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x62ceb7511df54296ULL;
  static const uint64_t static_value2 = 0x69d5680ad1b7fffbULL;
};

template<class ContainerAllocator>
struct DataType< ::motor_positions::viaPoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "motor_positions/viaPoints";
  }

  static const char* value(const ::motor_positions::viaPoints_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::motor_positions::viaPoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 motor_1\n"
"uint16 motor_2\n"
"uint16 motor_3\n"
"uint16 motor_4\n"
;
  }

  static const char* value(const ::motor_positions::viaPoints_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::motor_positions::viaPoints_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.motor_1);
      stream.next(m.motor_2);
      stream.next(m.motor_3);
      stream.next(m.motor_4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct viaPoints_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::motor_positions::viaPoints_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::motor_positions::viaPoints_<ContainerAllocator>& v)
  {
    s << indent << "motor_1: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.motor_1);
    s << indent << "motor_2: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.motor_2);
    s << indent << "motor_3: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.motor_3);
    s << indent << "motor_4: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.motor_4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOTOR_POSITIONS_MESSAGE_VIAPOINTS_H
